// When the user clicks on the search box, we want to toggle the search dropdown
function displayToggleSearch(e) {
  e.preventDefault();
  e.stopPropagation();

  closeDropdownSearch(e);
  
  if (idx === null) {
    console.log("Building search index...");
    prepareIdxAndDocMap();
    console.log("Search index built.");
  }
  const dropdown = document.querySelector("#search-dropdown-content");
  if (dropdown) {
    if (!dropdown.classList.contains("show")) {
      dropdown.classList.add("show");
    }
    document.addEventListener("click", closeDropdownSearch);
    document.addEventListener("keydown", searchOnKeyDown);
    document.addEventListener("keyup", searchOnKeyUp);
  }
}

//We want to prepare the index only after clicking the search bar
var idx = null
const docMap = new Map()

function prepareIdxAndDocMap() {
  const docs = [  
    {
      "title": "Artifacts",
      "url": "/zio-aws/docs/artifacts.html",
      "content": "Published artifacts HTTP client modules: \"io.github.vigoo\" %% \"zio-aws-akka-http\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-http4s\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-netty\" % \"4.0.5\" List of all the generated libraries: \"io.github.vigoo\" %% \"zio-aws-accessanalyzer\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-account\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-acm\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-acmpca\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-alexaforbusiness\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-amp\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-amplify\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-amplifybackend\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-apigateway\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-apigatewaymanagementapi\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-apigatewayv2\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-appconfig\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-appconfigdata\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-appflow\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-appintegrations\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-applicationautoscaling\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-applicationcostprofiler\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-applicationdiscovery\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-applicationinsights\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-appmesh\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-apprunner\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-appstream\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-appsync\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-athena\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-auditmanager\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-autoscaling\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-autoscalingplans\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-backup\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-batch\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-braket\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-budgets\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-chime\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-chimesdkidentity\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-chimesdkmeetings\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-chimesdkmessaging\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-cloud9\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-cloudcontrol\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-clouddirectory\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-cloudformation\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-cloudfront\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-cloudhsm\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-cloudhsmv2\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-cloudsearch\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-cloudsearchdomain\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-cloudtrail\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-cloudwatch\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-cloudwatchevents\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-cloudwatchlogs\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-codeartifact\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-codebuild\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-codecommit\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-codedeploy\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-codeguruprofiler\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-codegurureviewer\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-codepipeline\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-codestar\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-codestarconnections\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-codestarnotifications\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-cognitoidentity\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-cognitoidentityprovider\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-cognitosync\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-comprehend\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-comprehendmedical\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-computeoptimizer\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-config\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-connect\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-connectcontactlens\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-connectparticipant\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-costandusagereport\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-costexplorer\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-customerprofiles\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-databasemigration\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-databrew\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-dataexchange\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-datapipeline\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-datasync\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-dax\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-detective\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-devicefarm\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-devopsguru\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-directconnect\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-directory\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-dlm\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-docdb\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-drs\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-dynamodb\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-dynamodbstreams\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-ebs\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-ec2\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-ec2instanceconnect\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-ecr\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-ecrpublic\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-ecs\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-efs\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-eks\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-elasticache\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-elasticbeanstalk\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-elasticinference\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-elasticloadbalancing\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-elasticloadbalancingv2\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-elasticsearch\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-elastictranscoder\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-emr\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-emrcontainers\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-eventbridge\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-finspace\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-finspacedata\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-firehose\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-fis\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-fms\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-forecast\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-forecastquery\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-frauddetector\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-fsx\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-gamelift\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-glacier\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-globalaccelerator\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-glue\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-grafana\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-greengrass\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-greengrassv2\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-groundstation\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-guardduty\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-health\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-healthlake\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-honeycode\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-iam\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-identitystore\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-imagebuilder\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-inspector\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-iot\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-iot1clickdevices\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-iot1clickprojects\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-iotanalytics\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-iotdataplane\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-iotdeviceadvisor\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-iotevents\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-ioteventsdata\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-iotfleethub\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-iotjobsdataplane\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-iotsecuretunneling\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-iotsitewise\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-iotthingsgraph\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-iotwireless\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-ivs\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-kafka\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-kafkaconnect\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-kendra\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-kinesis\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-kinesisanalytics\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-kinesisanalyticsv2\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-kinesisvideo\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-kinesisvideoarchivedmedia\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-kinesisvideomedia\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-kinesisvideosignaling\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-kms\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-lakeformation\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-lambda\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-lexmodelbuilding\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-lexmodelsv2\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-lexruntime\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-lexruntimev2\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-licensemanager\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-lightsail\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-location\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-lookoutequipment\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-lookoutmetrics\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-lookoutvision\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-machinelearning\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-macie\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-macie2\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-managedblockchain\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-marketplacecatalog\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-marketplacecommerceanalytics\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-marketplaceentitlement\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-marketplacemetering\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-mediaconnect\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-mediaconvert\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-medialive\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-mediapackage\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-mediapackagevod\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-mediastore\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-mediastoredata\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-mediatailor\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-memorydb\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-mgn\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-migrationhub\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-migrationhubconfig\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-migrationhubstrategy\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-mobile\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-mq\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-mturk\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-mwaa\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-neptune\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-networkfirewall\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-networkmanager\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-nimble\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-opensearch\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-opsworks\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-opsworkscm\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-organizations\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-outposts\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-panorama\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-personalize\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-personalizeevents\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-personalizeruntime\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-pi\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-pinpoint\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-pinpointemail\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-pinpointsmsvoice\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-polly\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-pricing\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-proton\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-qldb\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-qldbsession\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-quicksight\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-ram\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-rds\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-rdsdata\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-redshift\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-redshiftdata\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-rekognition\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-resiliencehub\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-resourcegroups\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-resourcegroupstaggingapi\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-robomaker\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-route53\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-route53domains\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-route53recoverycluster\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-route53recoverycontrolconfig\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-route53recoveryreadiness\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-route53resolver\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-s3\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-s3control\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-s3outposts\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-sagemaker\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-sagemakera2iruntime\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-sagemakeredge\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-sagemakerfeaturestoreruntime\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-sagemakerruntime\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-savingsplans\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-schemas\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-secretsmanager\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-securityhub\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-serverlessapplicationrepository\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-servicecatalog\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-servicecatalogappregistry\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-servicediscovery\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-servicequotas\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-ses\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-sesv2\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-sfn\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-shield\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-signer\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-sms\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-snowball\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-snowdevicemanagement\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-sns\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-sqs\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-ssm\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-ssmcontacts\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-ssmincidents\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-sso\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-ssoadmin\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-ssooidc\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-storagegateway\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-sts\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-support\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-swf\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-synthetics\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-textract\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-timestreamquery\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-timestreamwrite\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-transcribe\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-transcribestreaming\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-transfer\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-translate\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-voiceid\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-waf\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-wafregional\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-wafv2\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-wellarchitected\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-wisdom\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-workdocs\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-worklink\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-workmail\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-workmailmessageflow\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-workspaces\" % \"4.0.5\" \"io.github.vigoo\" %% \"zio-aws-xray\" % \"4.0.5\""
    } ,    
    {
      "title": "Aspects",
      "url": "/zio-aws/docs/aspects.html",
      "content": "Aspects It is possible to define aspects of type AwsCallAspect[R] that can modify the behavior of the AWS client modules. This can be used for example to add logging or metrics to the AWS clients and it’s also the recommended way to handle retries or apply rate limiting and other similar patterns. To define an aspect, create an instance of the AwsCallAspect trait: val callLogging: AwsCallAspect[Clock with Console] = new AwsCallAspect[Clock with Console] { override final def apply[R1 &lt;: Clock with Console, A]( f: ZIO[R1, AwsError, Described[A]] ): ZIO[R1, AwsError, Described[A]] = { f.timed.flatMap { case (duration, r @ Described(result, description)) =&gt; console .putStrLn( s\"[${description.service}/${description.operation}] ran for $duration\" ) .ignore .as(r) } } } // callLogging: AwsCallAspect[Clock with Console] = repl.MdocSession$App$$anon$1@329d426e This aspect can attached to a client layer with the @@ operator. Multiple aspects can be composed with &gt;&gt;&gt;. To see a full example, check example #2."
    } ,    
    {
      "title": "Version history",
      "url": "/zio-aws/docs/changelog.html",
      "content": "Version history Note: this is a manually maintained list of important changes. Because of having auto-release from CI, this list may not reflect all changes immediately. Dependencies are continuously updated and are not documented here. 3.15.35.5 Support for defining dual HTTP/1.1 and HTTP/2 HttpClient layers Convert model case classes to .ReadOnly trait with .asReadOnly 3.15.19.10 Fix for libraries that use the Integer alias for ints (such as zio-aws-sqs) 3.15.19.8 Updated fs2 release that fixes the http4s backend 3.15.19.7 Fix for event streaming wrappers such as subscribeToShard in zio-aws-kinesis 3.15.16.0 Introduced automatic release from CI, each new AWS SDK release triggers a new zio-aws build now zio-config support 2.14.7.0 Updated to AWS SDK 2.14.7 Fix an issue with http4s streaming uploads Iterable in place of List in the request models The akka-http client now gets the actor system from the environment Code generator rewritten as an sbt plugin 2.14.3.0 API breaking changes to make the streaming interface more ergonomic: Input/output byte streams are now flat (ZStream[Any, AwsError, Byte] instead of ZStream[Any, AwsError, Chunk[Byte]) Streaming operations return a ZStream that performs the request on first pull instead of a ZIO[..., ZStream[...]] Streaming for paginated operations that does not have a paginator in the Java SDK No xxxStream variants, streaming is the default and only interface for paginable operaitons Updated to AWS SDK 2.14.3 Fixed handling of some error cases Scala 2.12 version is now available 1.13.69.1 Initial release republished with fixed metadata in POMs 1.13.69.0 Initial release based on AWS Java SDK 2.13.69"
    } ,    
    {
      "title": "Configuration",
      "url": "/zio-aws/docs/config.html",
      "content": "Configuration Common configuration Each service module depends on the AwsConfig layer. This layer is responsible for setting up the AWS Java SDK’s async client, by setting the underlying HTTP engine and all the common settings. You can use the following layers to provide AwsConfig: Default core.config.default requires a HttpClient as dependency, but does not customize any other setting of the client Fully customized core.config.customized(customization) gives the freedom to customize the creation of the AWS async client directly by modifying it’s Builder Configured core.config.configured() is the recommended way to construct an AwsConfig. Beside requiring a HttpClient it also has ZConfig[CommonAwsConfig] as dependency. The CommonAwsConfig value can be either provided from code for example by ZLayer.succeed(CommonAwsConfig(...)) or it can be read from any of the supported config sources by zio-config. Note that AWS level retries are disabled by the configuration layer and it is not exposed in the CommonAwsConfig data structure either. The reason for this is that the recommended way to handle retries is to use aspects on the service layers. See the following table about the possible configuration values. Please note that the underlying HTTP engine also has its own specific configuration which is described on the page about the HTTP engines. Configuration Details FieldName Format Description Sources   all-of     Field Descriptions FieldName Format Description Sources region primitive value of type string, optional value, AWS region to connect to   credentials any-one-of default value: DefaultCredentialsProvider(providerChain=LazyAwsCredentialsProvider(delegate=Lazy(value=Uninitialized))), AWS credentials provider   endpointOverride primitive value of type uri, optional value, Overrides the AWS service endpoint   client all-of optional value, Common settings for AWS service clients   credentials FieldName Format Description Sources   primitive value of type string     primitive value of type string     all-of     Field Descriptions FieldName Format Description Sources accessKeyId primitive value of type string, AWS access key ID   secretAccessKey primitive value of type string, AWS secret access key   client FieldName Format Description Sources extraHeaders list Extra headers to be sent with each request   apiCallTimeout primitive value of type duration, optional value, Amount of time to allow the client to complete the execution of an API call   apiCallAttemptTimeout primitive value of type duration, optional value, Amount of time to wait for the HTTP request to complete before giving up   defaultProfileName primitive value of type string, optional value, Default profile name   extraHeaders FieldName Format Description Sources name primitive value of type string, Header name     any-one-of     Field Descriptions FieldName Format Description Sources value list value of type string, Header value   value primitive value of type string, Header value   Service layer Each AWS service’s generated client has it own layer that depends on AwsConfig. It is possible to reuse the same AwsConfig layer for multiple AWS service clients, sharing a common configuration. Usually the service client does not require any additional configuration, in this case the live layer can be used, for example: awsConfig &gt;&gt;&gt; (ec2.live ++ elasticbeanstalk.live)"
    } ,    
    {
      "title": "Examples",
      "url": "/zio-aws/docs/examples.html",
      "content": "Examples The following example uses the ElasticBeanstalk and EC2 APIs to print some info. object Main extends zio.App { val program: ZIO[Console with Ec2 with ElasticBeanstalk, AwsError, Unit] = for { appsResult &lt;- elasticbeanstalk.describeApplications(DescribeApplicationsRequest(applicationNames = Some(List(\"my-service\")))) app &lt;- appsResult.applications.map(_.headOption) _ &lt;- app match { case Some(appDescription) =&gt; for { applicationName &lt;- appDescription.applicationName _ &lt;- console.putStrLn(s\"Got application description for $applicationName\").ignore envStream = elasticbeanstalk.describeEnvironments(DescribeEnvironmentsRequest(applicationName = Some(applicationName))) _ &lt;- envStream.run(Sink.foreach { env =&gt; env.environmentName.flatMap { environmentName =&gt; (for { environmentId &lt;- env.environmentId _ &lt;- console.putStrLn(s\"Getting the EB resources of $environmentName\").ignore resourcesResult &lt;- elasticbeanstalk.describeEnvironmentResources(DescribeEnvironmentResourcesRequest(environmentId = Some(environmentId))) resources &lt;- resourcesResult.environmentResources _ &lt;- console.putStrLn(s\"Getting the EC2 instances in $environmentName\").ignore instances &lt;- resources.instances instanceIds &lt;- ZIO.foreach(instances)(_.id) _ &lt;- console.putStrLn(s\"Instance IDs are ${instanceIds.mkString(\", \")}\").ignore reservationsStream = ec2.describeInstances(DescribeInstancesRequest(instanceIds = Some(instanceIds))) _ &lt;- reservationsStream.run(Sink.foreach { reservation =&gt; reservation.instances.flatMap { instances =&gt; ZIO.foreach(instances) { instance =&gt; for { id &lt;- instance.instanceId typ &lt;- instance.instanceType launchTime &lt;- instance.launchTime _ &lt;- console.putStrLn(s\" instance $id:\").ignore _ &lt;- console.putStrLn(s\" type: $typ\").ignore _ &lt;- console.putStrLn(s\" launched at: $launchTime\").ignore } yield () } } }) } yield ()).catchAll { error =&gt; console.putStrLnErr(s\"Failed to get info for $environmentName: $error\").ignore } } }) } yield () case None =&gt; ZIO.unit } } yield () override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] = { val httpClient = http4s.default //val httpClient = netty.default val awsConfig = httpClient &gt;&gt;&gt; core.config.default val aws = awsConfig &gt;&gt;&gt; (ec2.live ++ elasticbeanstalk.live) program.provideCustomLayer(aws) .either .flatMap { case Left(error) =&gt; console.putStrErr(s\"AWS error: $error\").ignore.as(ExitCode.failure) case Right(_) =&gt; ZIO.unit.as(ExitCode.success) } } }"
    } ,    
    {
      "title": "HTTP",
      "url": "/zio-aws/docs/http.html",
      "content": "HTTP implementations By default the AWS Java SDK uses netty under the hood to make the HTTP client calls. zio-aws defines the http client as a layer (HttpClient) that has to be provided to the AWS configuration layer. Currently the following implementations can be used: zio-aws-netty contains the default netty implementation packed as a layer zio-aws-akka-http is based on Matthias Lüneberg’s aws-spi-akka-http library zio-aws-http4s is an implementation on top of http4s Netty The default HTTP implementation in the AWS Java SDK is Netty. To use it with the default settings, use the netty.default layer to provide the HttpClient for the AwsConfig layer. It is also possible to customize the NettyNioAsyncHttpClient directly by manipulation it’s Builder, by using the netty.customized(customization) layer. The recommended way for configuration is to use the zio-config support: def configured( tlsKeyManagersProvider: Option[TlsKeyManagersProvider] = None, tlsTrustManagersProvider: Option[TlsTrustManagersProvider] = None ): ZLayer[ZConfig[NettyClientConfig], Throwable, HttpClient] Everything except the TLS key and trust managers are described by the zio-config provided NettyClientConfig data structure. See the following table for all the options: Configuration Details FieldName Format Description Sources   all-of     Field Descriptions FieldName Format Description Sources maxConcurrency primitive value of type int, default value: 50, Maximum number of allowed concurrent requests   maxPendingConnectionAcquires primitive value of type int, default value: 10000, The maximum number of pending acquires allowed   readTimeout primitive value of type duration, default value: PT30S, The amount of time to wait for a read on a socket   writeTimeout primitive value of type duration, default value: PT30S, The amount of time to wait for a write on a socket   connectionTimeout primitive value of type duration, default value: PT2S, The amount of time to wait when initially establishing a connection before giving up   connectionAcquisitionTimeout primitive value of type duration, default value: PT10S, The amount of time to wait when acquiring a connection from the pool before giving up   connectionTimeToLive primitive value of type duration, default value: PT0S, The maximum amount of time that a connection should be allowed to remain open, regardless of usage frequency   connectionMaxIdleTime primitive value of type duration, default value: PT5S, Maximum amount of time that a connection should be allowed to remain open while idle   useIdleConnectionReaper primitive value of type boolean, default value: true, If true, the idle connections in the pool should be closed   protocol primitive value of type string, default value: Dual, HTTP/1.1 or HTTP/2 or Dual   channelOptions all-of default value: NettyChannelOptions(Vector()), Custom Netty channel options   sslProvider primitive value of type string, optional value, The SSL provider to be used   proxy all-of optional value, Proxy configuration   http2 all-of optional value, HTTP/2 specific options   channelOptions FieldName Format Description Sources SO_BROADCAST primitive value of type boolean, optional value, Allow transmission of broadcast datagrams   SO_KEEPALIVE primitive value of type boolean, optional value, Keep connection alive   SO_SNDBUF primitive value of type int, optional value, The size of the socket send buffer   SO_RCVBUF primitive value of type int, optional value, The size of the socket receive buffer   SO_REUSEADDR primitive value of type boolean, optional value, Re-use address   SO_LINGER primitive value of type int, optional value, Linger on close if data is present   IP_TOS primitive value of type int, optional value, The ToS octet in the IP header   IP_MULTICAST_IF primitive value of type string, optional value, The network interface’s name for IP multicast datagrams   IP_MULTICAST_TTL primitive value of type int, optional value, The time-to-live for IP multicast datagrams   IP_MULTICAST_LOOP primitive value of type boolean, optional value, Loopback for IP multicast datagrams   TCP_NODELAY primitive value of type boolean, optional value, Disable the Nagle algorithm   CONNECT_TIMEOUT_MILLIS primitive value of type duration, optional value, Connect timeout   WRITE_SPIN_COUNT primitive value of type int, optional value, Write spin count   ALLOW_HALF_CLOSURE primitive value of type boolean, optional value, Allow half closure   AUTO_READ primitive value of type boolean, optional value, Auto read   AUTO_CLOSE primitive value of type boolean, optional value, Auto close   SINGLE_EVENTEXECUTOR_PER_GROUP primitive value of type boolean, optional value, Single event executor per group   proxy FieldName Format Description Sources scheme primitive value of type string, default value: Http, The proxy scheme   host primitive value of type string, Hostname of the proxy   port primitive value of type int, Port of the proxy   nonProxyHosts list value of type string, default value: Set(), Hosts that should not be proxied   http2 FieldName Format Description Sources maxStreams primitive value of type long, Max number of concurrent streams per connection   initialWindowSize primitive value of type int, Initial window size of a stream   healthCheckPingPeriod primitive value of type duration, default value: PT5S, The period that the Netty client will send PING frames to the remote endpoint   Akka HTTP The Akka HTTP implementation can be chosen by using the akkahttp.client() layer for providing HttpClient to AwsConfig. This implementation uses the standard akka-http settings from the application’s Lightbend config, it is not described with zio-config descriptors. http4s Another alternative is the http4s client. To use the default settings, provide the http4s.default layer to AwsConfig. Customization by manipulating the builder is also possible by http4s.customized(customization). And similarly to the Netty client, configuration is also possible via zio-config: Configuration Details FieldName Format Description Sources   all-of     Field Descriptions FieldName Format Description Sources responseHeaderTimeout primitive value of type duration, default value: Duration.Inf, Timeout for receiving the header part of the response   idleTimeout primitive value of type duration, default value: 1 minute, Timeout for client connection staying idle   requestTimeout primitive value of type duration, default value: 45 seconds, Timeout for the whole request   connectTimeout primitive value of type duration, default value: 10 seconds, Timeout for connecting to the server   userAgent primitive value of type string, default value: User-Agent(http4s-blaze/1.0.10,List()), User-Agent header sent by the client   maxTotalConnections primitive value of type int, default value: 10, Maximum number of parallel connections   maxWaitQueueLimit primitive value of type int, default value: 256, Maximum number of requests in queue   checkEndpointIdentification primitive value of type boolean, default value: true, Check https identity   maxResponseLineSize primitive value of type int, default value: 4096, Maximum line length of headers in response   maxHeaderLength primitive value of type int, default value: 40960, Maximum total length of the response headers   maxChunkSize primitive value of type int, default value: 2147483647, Maximum chunk size   chunkBufferMaxSize primitive value of type int, default value: 1048576, Maximum size of the chunk buffer   parserMode primitive value of type string, default value: Strict, Parser mode, strict or lenient   bufferSize primitive value of type int, default value: 8192, Buffer size   channelOptions all-of default value: ChannelOptions(Vector(OptionValue(TCP_NODELAY,true))), Collection of socket options   channelOptions FieldName Format Description Sources SO_BROADCAST primitive value of type boolean, optional value, Allow transmission of broadcast datagrams   SO_KEEPALIVE primitive value of type boolean, optional value, Keep connection alive   SO_SNDBUF primitive value of type int, optional value, The size of the socket send buffer   SO_RCVBUF primitive value of type int, optional value, The size of the socket receive buffer   SO_REUSEADDR primitive value of type boolean, optional value, Re-use address   SO_LINGER primitive value of type int, optional value, Linger on close if data is present   IP_TOS primitive value of type int, optional value, The ToS octet in the IP header   IP_MULTICAST_IF primitive value of type string, optional value, The network interface’s name for IP multicast datagrams   IP_MULTICAST_TTL primitive value of type int, optional value, The time-to-live for IP multicast datagrams   IP_MULTICAST_LOOP primitive value of type boolean, optional value, Loopback for IP multicast datagrams   TCP_NODELAY primitive value of type boolean, optional value, Disable the Nagle algorithm  "
    } ,    
    {
      "title": "Getting started",
      "url": "/zio-aws/docs/",
      "content": "Getting started Low-level AWS wrapper for ZIO for all AWS services using the AWS Java SDK v2. The goal is to have access to all AWS functionality for cases when only a simple, direct access is needed from a ZIO application, or to be used as a building block for higher level wrappers around specific services. Check the list of available artifacts to get started. The wrapper page shows in details how the library wraps the underlying Java SDK. On the configuration page you can learn more about how set the common properties of the AWS clients in addition to setting up one of the HTTP implementations. Features Common configuration layer ZIO module layer per AWS service Wrapper for all operations on all services Http service implementations for functional Scala http libraries, injected through ZIO’s module system ZStream wrapper around paginated operations Service-specific extra configuration More idiomatic Scala request and response types wrapping the Java classes Design The library consists of a core module and one generated library for each AWS service, based on the official JSON schema contained in the AWS Java SDK’s artifacts. By only providing a wrapper on top of the Java SDK the code generator does not have to know all the implementation details and features of the schema. That said in the future it is possible to replace the implementation to a fully generated native functional Scala solution without breaking the generated APIs. Higher level AWS libraries The following libraries are built on top of zio-aws providing higher level interfaces for specific AWS services: ZIO Kinesis ZIO SQS Additional resources There is a blog post explaining how the code generator is implemented. This post shows an example of using zio-aws together with ZIO Query"
    } ,    
    {
      "title": "zio-aws: Home",
      "url": "/zio-aws/",
      "content": ""
    } ,        
    {
      "title": "Wrappers",
      "url": "/zio-aws/docs/wrapper.html",
      "content": "Client wrappers Modules For each AWS Service the library defines a ZIO module with wrapper functions for all the operations, and a live implementation that depends on a core AWS configuration layer: val live: ZLayer[AwsConfig, Throwable, Ec2] The AwsConfig layer defines how each service’s async Java client gets configured, including the http client which is provided by an other layer AwsConfig is depending on. Each module has accessor functions for all operations of the given service. Operations For simple request-response operations the library generates a very light wrapper (see below to learn about future plans of wrapping the model types too): def deleteVolume(request: DeleteVolumeRequest): ZIO[Ec2, AwsError, DeleteVolumeResponse] For operations where either the input or the output or both are byte streams, a ZStream wrapper is generated: def getObject(request: GetObjectRequest): ZIO[S3, AwsError, StreamingOutputResult[GetObjectResponse]] def putObject(request: PutObjectRequest, body: ZStream[Any, AwsError, Byte]) where the output is a stream packed together with additional response data: case class StreamingOutputResult[Response](response: Response, output: ZStream[Any, AwsError, Byte]) For operations with event streams a ZStream of a model type gets generated: def startStreamTranscription(request: StartStreamTranscriptionRequest, input: ZStream[Any, AwsError, AudioStream]): ZStream[TranscribeStreaming, AwsError, TranscriptEvent] And for all operations that supports pagination, streaming wrappers gets generated: def scan(request: ScanRequest): ZStream[DynamoDb, AwsError, Map[String, AttributeValue]] Note that for event streaming or paginating operations returning a ZStream the actual AWS call happens when the stream gets pulled. Model wrappers For each model type a set of wrappers are generated, providing the following functionality: Case classes with default parameter values instead of the builder pattern Automatic conversion to Scala collection types ADTs instead of the Java enums ZIO functions to “get or fail” the optional model fields Primitive type aliases The following example from the elasticsearch module shows how the generated case classes look like, to be used as input for the service operations: case class DescribePackagesFilter(name: scala.Option[DescribePackagesFilterName] = None, value: scala.Option[Iterable[primitives.DescribePackagesFilterValue]] = None) { def buildAwsValue(): software.amazon.awssdk.services.elasticsearch.model.DescribePackagesFilter = { import DescribePackagesFilter.zioAwsBuilderHelper.BuilderOps software.amazon.awssdk.services.elasticsearch.model.DescribePackagesFilter .builder() .optionallyWith(name.map(value =&gt; value.unwrap))(_.name) .optionallyWith(value.map(value =&gt; value.map { item =&gt; item: java.lang.String }.asJava))(_.value) .build() } } When processing the results of the operations (either directly or though the ZStream wrappers), the AWS Java model types are wrapped by a read-only wrapper interface. The following example shows one from the transcribe module: object CreateMedicalVocabularyResponse { private lazy val zioAwsBuilderHelper: io.github.vigoo.zioaws.core.BuilderHelper[software.amazon.awssdk.services.transcribe.model.CreateMedicalVocabularyResponse] = io.github.vigoo.zioaws.core.BuilderHelper.apply trait ReadOnly { def editable: CreateMedicalVocabularyResponse = CreateMedicalVocabularyResponse(vocabularyNameValue.map(value =&gt; value), languageCodeValue.map(value =&gt; value), vocabularyStateValue.map(value =&gt; value), lastModifiedTimeValue.map(value =&gt; value), failureReasonValue.map(value =&gt; value)) def vocabularyNameValue: scala.Option[primitives.VocabularyName] def languageCodeValue: scala.Option[LanguageCode] def vocabularyStateValue: scala.Option[VocabularyState] def lastModifiedTimeValue: scala.Option[primitives.DateTime] def failureReasonValue: scala.Option[primitives.FailureReason] def vocabularyName: ZIO[Any, io.github.vigoo.zioaws.core.AwsError, primitives.VocabularyName] = io.github.vigoo.zioaws.core.AwsError.unwrapOptionField(\"vocabularyName\", vocabularyNameValue) def languageCode: ZIO[Any, io.github.vigoo.zioaws.core.AwsError, LanguageCode] = io.github.vigoo.zioaws.core.AwsError.unwrapOptionField(\"languageCode\", languageCodeValue) def vocabularyState: ZIO[Any, io.github.vigoo.zioaws.core.AwsError, VocabularyState] = io.github.vigoo.zioaws.core.AwsError.unwrapOptionField(\"vocabularyState\", vocabularyStateValue) def lastModifiedTime: ZIO[Any, io.github.vigoo.zioaws.core.AwsError, primitives.DateTime] = io.github.vigoo.zioaws.core.AwsError.unwrapOptionField(\"lastModifiedTime\", lastModifiedTimeValue) def failureReason: ZIO[Any, io.github.vigoo.zioaws.core.AwsError, primitives.FailureReason] = io.github.vigoo.zioaws.core.AwsError.unwrapOptionField(\"failureReason\", failureReasonValue) } private class Wrapper(impl: software.amazon.awssdk.services.transcribe.model.CreateMedicalVocabularyResponse) extends CreateMedicalVocabularyResponse.ReadOnly { override def vocabularyNameValue: scala.Option[primitives.VocabularyName] = scala.Option(impl.vocabularyName()).map(value =&gt; value: primitives.VocabularyName) override def languageCodeValue: scala.Option[LanguageCode] = scala.Option(impl.languageCode()).map(value =&gt; LanguageCode.wrap(value)) override def vocabularyStateValue: scala.Option[VocabularyState] = scala.Option(impl.vocabularyState()).map(value =&gt; VocabularyState.wrap(value)) override def lastModifiedTimeValue: scala.Option[primitives.DateTime] = scala.Option(impl.lastModifiedTime()).map(value =&gt; value: primitives.DateTime) override def failureReasonValue: scala.Option[primitives.FailureReason] = scala.Option(impl.failureReason()).map(value =&gt; value: primitives.FailureReason) } def wrap(impl: software.amazon.awssdk.services.transcribe.model.CreateMedicalVocabularyResponse): ReadOnly = new Wrapper(impl) } As a large part of the models in the AWS SDK are defined as optional, the generated wrapper also contains ZIO accessor functions, which lift the option value to make it more comfortable to chain the AWS operations. Mocks Each module also contains generated ZIO Test mocks for the given service."
    } ,        
  ];

  idx = lunr(function () {
    this.ref("title");
    this.field("content");

    docs.forEach(function (doc) {
      this.add(doc);
    }, this);
  });

  docs.forEach(function (doc) {
    docMap.set(doc.title, doc.url);
  });
}

// The onkeypress handler for search functionality
function searchOnKeyDown(e) {
  const keyCode = e.keyCode;
  const parent = e.target.parentElement;
  const isSearchBar = e.target.id === "search-bar";
  const isSearchResult = parent ? parent.id.startsWith("result-") : false;
  const isSearchBarOrResult = isSearchBar || isSearchResult;

  if (keyCode === 40 && isSearchBarOrResult) {
    // On 'down', try to navigate down the search results
    e.preventDefault();
    e.stopPropagation();
    selectDown(e);
  } else if (keyCode === 38 && isSearchBarOrResult) {
    // On 'up', try to navigate up the search results
    e.preventDefault();
    e.stopPropagation();
    selectUp(e);
  } else if (keyCode === 27 && isSearchBarOrResult) {
    // On 'ESC', close the search dropdown
    e.preventDefault();
    e.stopPropagation();
    closeDropdownSearch(e);
  }
}

// Search is only done on key-up so that the search terms are properly propagated
function searchOnKeyUp(e) {
  // Filter out up, down, esc keys
  const keyCode = e.keyCode;
  const cannotBe = [40, 38, 27];
  const isSearchBar = e.target.id === "search-bar";
  const keyIsNotWrong = !cannotBe.includes(keyCode);
  if (isSearchBar && keyIsNotWrong) {
    // Try to run a search
    runSearch(e);
  }
}

// Move the cursor up the search list
function selectUp(e) {
  if (e.target.parentElement.id.startsWith("result-")) {
    const index = parseInt(e.target.parentElement.id.substring(7));
    if (!isNaN(index) && (index > 0)) {
      const nextIndexStr = "result-" + (index - 1);
      const querySel = "li[id$='" + nextIndexStr + "'";
      const nextResult = document.querySelector(querySel);
      if (nextResult) {
        nextResult.firstChild.focus();
      }
    }
  }
}

// Move the cursor down the search list
function selectDown(e) {
  if (e.target.id === "search-bar") {
    const firstResult = document.querySelector("li[id$='result-0']");
    if (firstResult) {
      firstResult.firstChild.focus();
    }
  } else if (e.target.parentElement.id.startsWith("result-")) {
    const index = parseInt(e.target.parentElement.id.substring(7));
    if (!isNaN(index)) {
      const nextIndexStr = "result-" + (index + 1);
      const querySel = "li[id$='" + nextIndexStr + "'";
      const nextResult = document.querySelector(querySel);
      if (nextResult) {
        nextResult.firstChild.focus();
      }
    }
  }
}

// Search for whatever the user has typed so far
function runSearch(e) {
  if (e.target.value === "") {
    // On empty string, remove all search results
    // Otherwise this may show all results as everything is a "match"
    applySearchResults([]);
  } else {
    const tokens = e.target.value.split(" ");
    const moddedTokens = tokens.map(function (token) {
      // "*" + token + "*"
      return token;
    })
    const searchTerm = moddedTokens.join(" ");
    const searchResults = idx.search(searchTerm);
    const mapResults = searchResults.map(function (result) {
      const resultUrl = docMap.get(result.ref);
      return { name: result.ref, url: resultUrl };
    })

    applySearchResults(mapResults);
  }

}

// After a search, modify the search dropdown to contain the search results
function applySearchResults(results) {
  const dropdown = document.querySelector("div[id$='search-dropdown'] > .dropdown-content.show");
  if (dropdown) {
    //Remove each child
    while (dropdown.firstChild) {
      dropdown.removeChild(dropdown.firstChild);
    }

    //Add each result as an element in the list
    results.forEach(function (result, i) {
      const elem = document.createElement("li");
      elem.setAttribute("class", "dropdown-item");
      elem.setAttribute("id", "result-" + i);

      const elemLink = document.createElement("a");
      elemLink.setAttribute("title", result.name);
      elemLink.setAttribute("href", result.url);
      elemLink.setAttribute("class", "dropdown-item-link");

      const elemLinkText = document.createElement("span");
      elemLinkText.setAttribute("class", "dropdown-item-link-text");
      elemLinkText.innerHTML = result.name;

      elemLink.appendChild(elemLinkText);
      elem.appendChild(elemLink);
      dropdown.appendChild(elem);
    });
  }
}

// Close the dropdown if the user clicks (only) outside of it
function closeDropdownSearch(e) {
  // Check if where we're clicking is the search dropdown
  if (e.target.id !== "search-bar") {
    const dropdown = document.querySelector("div[id$='search-dropdown'] > .dropdown-content.show");
    if (dropdown) {
      dropdown.classList.remove("show");
      document.documentElement.removeEventListener("click", closeDropdownSearch);
    }
  }
}
